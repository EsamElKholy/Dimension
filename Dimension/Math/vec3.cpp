#include "vec3.h"

vec3::vec3(void){

}

vec3::vec3(float x, float y, float z){
	this->x = x;
	this->y = y;
	this->z = z;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float vec3::getLength(){
	return sqrtf((x * x) + (y * y) + (z * z));
}

vec3& vec3::normalize(){
	x /= getLength();
	y /= getLength();
	z /= getLength();

	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

vec3& vec3::add(const vec3 &other){
	x += other.x;
	y += other.y;
	z += other.z;

	return *this;
}

vec3& vec3::sub(const vec3 &other){
	x -= other.x;
	y -= other.y;
	z -= other.z;

	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

vec3& vec3::mul(const float &other){
	x *= other;
	y *= other;
	z *= other;

	return *this;
}

vec3& vec3::mul(const vec3 &other){
	x *= other.x;
	y *= other.y;
	z *= other.z;

	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

vec3& vec3::div(const vec3 &other){
	x /= other.x;
	y /= other.y;
	z /= other.z;

	return *this;
}

vec3& vec3::div(const float &other){
	x /= other;
	y /= other;
	z /= other;

	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

vec3 vec3::cross(const vec3 &vec) const{
	float _x = y * vec.z - z * vec.y;
	float _y = z * vec.x - x * vec.z;
	float _z = x * vec.y - y * vec.x;

	return vec3(_x ,_y ,_z);
}

float vec3::dot(const vec3 &vec) const{
	return (x * vec.x) + (y * vec.y) + (z * vec.z);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

vec3 operator+(vec3 left, const vec3& right)
{
	return left.add(right);
}

vec3 operator-(vec3 left, const vec3& right)
{
	return left.sub(right);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

vec3 operator*(vec3 left, const vec3& right)
{
	return left.mul(right);
}

vec3 operator*(vec3 left, const float& right)
{
	return left.mul(right);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

vec3 operator/(vec3 left, const vec3& right)
{
	return left.div(right);
}

vec3 operator/(vec3 left, const float& right)
{
	return left.div(right);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

vec3& vec3::operator+=(const vec3& other)
{
	return add(other);
}

vec3& vec3::operator-=(const vec3& other)
{
	return sub(other);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

vec3& vec3::operator*=(const vec3& other)
{
	return mul(other);
}

vec3& vec3::operator*=(const float& other)
{
	return mul(other);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

vec3& vec3::operator/=(const vec3& other)
{
	return div(other);
}

vec3& vec3::operator/=(const float& other)
{
	return div(other);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool vec3::operator==(const vec3& other)
{
	return x == other.x && y == other.y;
}

bool vec3::operator!=(const vec3& other)
{
	return !(*this == other);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::ostream& operator<<(std::ostream& stream, const vec3& vector)
{
	stream << "vec2: (" << vector.x << ", " << vector.y << ")";
	return stream;
}